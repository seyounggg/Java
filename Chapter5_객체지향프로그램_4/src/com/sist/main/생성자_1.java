package com.sist.main;
/*
 *   자바 클래스의 구성 => 객체지향 특성(접근지정어, 캡슐화, 재사용, 수정, 추가)
 *   -------------
 *   class ClassName
 *   {
 *      -------------------------
 *      변수
 *        1) 멤버변수(인스턴스변수=new 메모리에 저장할 때 따로 저장되는 변수)
 *           형식) [접근지정어] 데이터형 변수명 = 값(디폴트값)
 *                (디폴트값)
 *                  int => 0
 *                  double => 0.0
 *                  boolean => false
 *                  String,배열,클래스 => null(주소가 저장이 안된 상태)
 *                
 *                int a; => 0
 *                int a=10; => 명시적인 초기화
 *                
 *               { int a;
 *                a=10;} => 구현하는 것 // 클래스 영역에서는 이렇게 사용할 경우 오류 발생
 *                       => 변수의 초기화(생성자) // 클래스에서!
 *                = 생성시점 : new를 이용해서 메모리 공간 확보
 *                = 소멸시점 : 객체가 null이거나 사용하지 않는 경우
 *                         : 가비지 컬렉션에 의해 소멸됨(메모리 회수)
 *            => 가장 많이 사용되는 변수(여러개를 저장)
 *            
 *            사용방법)
 *               class A
 *               {
 *                  int age; //초기값 0
 *                  String name;//초기값 null
 *               }
 *               
 *               A a=new A(); -> age,name을 저장할 수 있는 공간 확보
 *                            = 접근방식 : a.age , a.name
 *                            = a는 객체,인스턴스변수(메모리에 저장된 상태)
 *                            = a안에는 주소값이 저장
 *                            
 *               A b=new A(); -> a와 다른 b공간이 생긴거
 *                            = 접근방식 : b.age , b.name
 *               -a-
 *               100  => 100-------------
 *               ---         ------- age
 *                              25
 *                           ------- name
 *                             홍길동
 *                           -------
 *                         --------------
 *                         
 *               -b-
 *               200  => 200-------------
 *               ---         ------- age
 *                              20
 *                           ------- name
 *                             심청이
 *                           -------
 *                         --------------
 *                         
 *               b=a; => 저장된 데이터관리 위치가 변경이 될 수 있다(데이터 손실)
 *               ======> 메모리 주소의 복구가 어렵다
 *                    
 *               -a-
 *               100  => 100-------------
 *               ---         ------- age
 *                              25
 *                           ------- name
 *                             홍길동
 *                           -------
 *                         --------------
 *               // b의 주소값이 a가 됐으므로 b에는 접근할 수 없음 / 함부로 대입하고 그러면 안돼~!     
 *               -b-
 *               200  =>(x) 200------------- GC(가비지컬렉션)
 *               ---           ------- age
 *                                20
 *                             ------- name
 *                               심청이
 *                             -------
 *                           --------------
 *            ================================> class는 한개만 설계 ==> 저장은 new를 이용해서 여러개!!!
 *             
 *         2) 정적변수(클래스변수, 공유변수, static변수) : 한개의 공간만 생성 
 *            => 공유변수 : 오라클
 *            형식) [접근지정어] static 데이터형 변수명 = 값(디폴트값)
 *                  (디폴트값)
 *                  int => 0
 *                  double => 0.0
 *                  boolean => false
 *                  String,배열,클래스 => null(주소가 저장이 안된 상태)
 *               = 생성시점 : 컴파일러에 의해 자동으로 메모리에 저장 //new를 사용하지 않고도 가능
 *               = 소멸시점 : 객체가 null이거나 사용하지 않는 경우
 *      -------------------------
 *      생성자
 *        1) 객체가 생성될 때 호출 메소드
 *           A a=new A()
 *                   ---생성자
 *        2) 특징
 *           = 클래스명과 동일
 *           = 리턴타입이 없다
 *           = 생성자가 없는 경우에 추가(매개변수가 없는 생성자가 추가)
 *                                 ---------------- 기본 생성자
 *           = 멤버변수의 초기화
 *           = 생성자는 여러개 사용이 가능(한개의 클래스)
 *           = 데이터베이스 또는 네트워크 연결, 윈도우...에서 많이 등장
 *           = 자동 추가
 *             * import java.lang.*
 *                      --------- String, Math, System ...
 *             * class A extends Object
 *                       -------------- 생략되어 있음
 *             * 생성자 : 기본생성자()
 *             * return : void 
 *           class A {
 *             A(){} -> 생성자
 *             void A(){} *** 일반 메소드
 *             A(int a){} -> 생성자
 *             A(int a,int b){} -> 생성자
 *           }
 *        3) 역할
 *           = 시작과 동시에 처리
 *           예) 자동 로그인
 *              오라클 연결
 *           = 멤버변수의 초기화
 *              class A
 *              {
 *                 int a;
 *                 A()
 *                 {
 *                   // 파일읽기, 크롤링...
 *                   = 구현해서 초기화
 *                 }
 *              }
 *              = 필요시마다 사용한다.(생략가능)
 *                                ---컴파일러에 의해 자동으로 추가
 *      -------------------------
 *      메소드
 *        1) 역할 : 다른 클래스, 클래스와 통신(연결)
 *        2) 수정, 추가 (오버라이딩_기능 바꾸기, 오버로딩_새로운 기능을 만들기)
 *        3) 반복 제거
 *        4) 구조적인 프로그램(단락을 나눠서 처리) => 오류, 수정을 위해서
 *        5) 메소드는 호출시마다 처음부터 끝까지 수행
 *        6) 구성요소
 *           결과값(리턴타입)
 *             => 데이터형 : 기본형(int, double, char, boolean, long...)
 *                         배열(int[], double[] ...) : 같은 데이터형이 여러개일 때 주로 사용
 *                         클래스(String, 사용자 정의) : 다른 데이터형이 여러개일 때 주로 사용
 *                              -> 자바에서 지원하는 기본형은 지원하지 않는 기능이 많음
 *                              -> 프로그래머가 필요한 데이터를 묶어서 하나의 클래스로 만들어서 사용함 => 사용자 정의 데이터형
 *                              -> 기본형과 동일하게 사용 가능/형변환, 대입 등 다 가능함!!
 *                         (*) 클래스 안에서 배열 사용이 가능(클래스를 클래스로만 생각하지말고 데이터형이라고 생각하고 사용)
 *                       
 *           메소드명 : 정리해준 내용 확인하기
 *                    식별자 => 변수, 클래스, 인터페이스, 메소드...
 *                    - 변수, 메소드는 소문자로 쓰길 권장
 *                    - 클래스, 인터페이스는 대문자로 쓰길 권장
 *                    - 한글은 가급적이면 사용하지 않는다
 *           매개변수(사용자 요청값)
	 *       (*) 사용자의 요청값을 받아서 요청처리 결과값을 도출
	 *       (*) 최소화를 시킨다(3개 이상이면 => 배열 or 클래스 둘중 하나 선택!!)
	 *       예)
	 *         정수 10개를 보내주고 정렬
	 *         (int a, int b ... ) X 변수 10개 잡는것보
	 *         (int [] arr) O        배열 1개 잡는게 더 편해
	 *         
	 *         회원가입
	 *         (String id, String pwd, String name, String sex, int age,
	 *          String post, String addr1, String addr2, String tel, String email) 변수 여러개 잡는 것보다
	 *         (Member m)                                                          클래스 1개로 처리하는게 더 편하다
	 *         
	 *         유형)
	 *           => 리턴타입 (X or 한개만 존재) => 여러개면(배열, 클래스 사용) 
	 *           => 매개변수 (X or 한개 이상)
	 *         형식)
	 *         [접근지정어][옵션] 리턴타입 메소드명 (매개변수..) <- 선언부
	 *                        -----결과값     ------ 요청
	 *         {
	 *                        <- 구현부
	 *         }
	 *         - 옵션 : static, abstract, final
	 *         - 구현부 : 연산/제어
	 *         - return 값;이 void 일 경우 생략이 가능
	 *         
	 *         
 *      -------------------------
 *   
 *   }
 *   
 *   = 접근지정어(public / protected / default / private)
 *      - 사용 : 변수, 메소드, 생성자
 *   = 캡슐화 : 데이터 보호 => 모든 데이터는 private
 *   = 재사용 : 변경해서 사용(=상속/is-a), 있는 그대로 사용(=포함/has-a)
 *   = 수정 : 오버라이딩
 *   = 추가 : 오버로딩
 *   
 */
public class 생성자_1 {
	// 자동으로 추가
	public static void main(String[] args) {
		

	}

}